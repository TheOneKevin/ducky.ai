diff --git a/src/a-st-ext.adoc b/src/a-st-ext.adoc
index c402585..e100eb8 100644
--- a/src/a-st-ext.adoc
+++ b/src/a-st-ext.adoc
@@ -226,6 +226,7 @@ those with both bits clear, but may result in lower performance.
 
 [[cas]]
 [source,asm]
+....
 .Sample code for compare-and-swap function using LR/SC.
         # a0 holds address of memory location
         # a1 holds expected value
@@ -241,6 +242,7 @@ those with both bits clear, but may result in lower performance.
     fail:
         li a0, 1             # Set return to failure.
         jr ra                # Return.
+....
 
 LR/SC can be used to construct lock-free data structures. An example
 using LR/SC to implement a compare-and-swap function is shown in
@@ -423,6 +425,7 @@ relinquishment.
 
 [[critical]]
 [source,asm]
+....
 .Sample code for mutual exclusion. `a0` contains the address of the lock.
         li           t0, 1        # Initialize swap value.
     again:
@@ -434,6 +437,7 @@ relinquishment.
         # Critical section.
         # ...
         amoswap.w.rl x0, x0, (a0) # Release lock by storing 0.
+....
 
 [NOTE]
 ====
diff --git a/src/counters.adoc b/src/counters.adoc
index cf646c6..ef2f00f 100644
--- a/src/counters.adoc
+++ b/src/counters.adoc
@@ -165,12 +165,14 @@ into `x3:x2`, even if the counter overflows its lower half between
 reading its upper and lower halves.
 
 [source,asm.]
+....
 .Sample code for reading the 64-bit cycle counter when XLEN=32.
     again:
         rdcycleh     x3
         rdcycle      x2
         rdcycleh     x4
         bne          x3, x4, again
+....
 
 
 === "Zihpm" Standard Extension for Hardware Performance Counters
diff --git a/src/mm-formal.adoc b/src/mm-formal.adoc
index 648e21a..2141bd8 100644
--- a/src/mm-formal.adoc
+++ b/src/mm-formal.adoc
@@ -26,7 +26,7 @@ how Alloy can be used to model check some of the mappings in <<memory_porting>>.
 
 .The RVWMO memory model formalized in Alloy (1/5: PPO)
 [source,c]
-----
+....
 // =RVWMO PPO=
 
 // Preserved Program Order
@@ -55,7 +55,7 @@ fun ppo : Event->Event {
 
 // the global memory order respects preserved program order
 fact { ppo in ^gmo }
-----
+....
 
 .The RVWMO memory model formalized in Alloy (2/5: Axioms)
 [,io]
